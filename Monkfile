#use dependency discovery for R/MATLAB
# @monk/autodep/dependencies.monkfile

#make a few plots relevant to motion ehergy

--command Rscript
--input motion_energy_plot.R
--input --match motion_energy\.csv
--output motion_energy_plot.pdf

#type "make figures" to try to refresh the figures
#--command --input --invisible --match '.*\.fig$'
#--invisible --phony figures

#Unpack all data into an R data file.
--command --once Rscript
--input --once unpack.R
--output --once data.RData
--input --match (.*_trials\.csv)

#make our motion energy graphs
--command Rscript
--input motion_energy_plot.R$
--input --match motion_energy.csv
--output --listing --mkdir energy/motion_energy_plot.list

--command Rscript
--input slopeModel.R
--input --match data.RData
--input motion_energy.csv
--output slopeModel.RData
--output slopeModel.pdf
--output --invisible inset_carrier.pdf
--output --invisible inset_sensitivity.pdf

--command Rscript
--input density.calibration.R
--input --match data.RData
--input slopeModel.RData
--output density.calibration.pdf

--command Rscript
--input --match "density.modeling.R$"
--input data.RData
--input slopeModel.RData
--output density.modeling.pdf
--output density.modeling.RData

# --command Rscript
# --input combined.model.R
# --input --match slopeModel\.RData
# --input density.modeling.RData
# --input motion_energy.csv
# --output combined.model.RData
# --output combined.model.pdf
# --phony --invisible pdf

--command Rscript # without folding
--input contours.R
--input --match slopeModel\.RData$
--input motion_energy.csv
--output --mkdir --listing contours/contours.list FALSE

--command --invisible --match --input contours/.*.pdf
--phony --invisible pdf

--command Rscript # with folding
--input contours.R
--input --match slopeModel.RData$
--input motion_energy.csv
--output --mkdir --listing contours/contours_folded.list TRUE
--phony --output --invisible intermediate_pdf

--command Rscript # with folding
--input contours.R
--input --match slopeModel.RData$
--input motion_energy.csv
--output --mkdir --listing contours/contours_presentation.list TRUE TRUE

#how about markov chain monte carlo?
--command RScript --input compileStan.R
--input --match (.*\.stan)\.R$
--output {0}.RData
--invisible --phony stan

--command Rscript --input --match (NineModels).R$
--output --listing {0}.list
--invisible --phony stan

--command Rscript --input StanModel.R
--input data.RData
--input motion_energy.csv
--input --match (.*).stan\.RData$
--output {0}.fit.RData
--invisible --phony fit

#some models are not baked yet, or need extra samples
#--command
#--output --match --invisible (CenterSurroundModel)\.fit\.RData$ 500

--command
--output --match --invisible (models/.*)\.fit\.RData$ --invisible --phony nine

--command
--output --match --invisible (ProportionalMotionEnergy)\.fit\.RData$ 4000

--command Rscript --input FitPlots.R
--input --match (.*)\.fit\.RData
--input motion_energy.csv
--output {0}.plots.pdf
--invisible --phony plot

# MotionEnergyLinear|MotionEnergySoftMin|

--command --once Rscript --input --once CompareStanFits.R
--output --once StanComparisonCircles.pdf
--input --match --once (OnlyMotionEnergy|SlopeModel|SoftMinModel)\.fit\.RData$
--invisible --phony plot

--command --once Rscript --input --once CompareStanFits.R
--output --once StanComparisonCircles.pdf
--input --match --once (OnlyMotionEnergy|SlopeModel|SoftMinModel)\.fit\.RData$
--invisible --phony plot

--command --once Rscript --input --once CompareStanFits.R
--output --once StanComparisonEnergies.pdf
--input --match --once (ProportionalMotionEnergy|SlopeModel|MotionEnergyRepulsion|OnlyMotionEnergy)\.fit\.RData$
--invisible --phony plot
--invisible --phony compare

--command --once Rscript --input --once CompareStanFits.R
--output --once StanComparisonCombined.pdf
--input --match --once (Hemifield|SummationField)\.fit\.RData$
--invisible --phony plot
--invisible --phony compare

--command --once Rscript --input --once CompareStanFits.R
--output --once models/comparison_d_{0}_c_{1}.pdf
--input --match models/d_([a-zA-Z_]*)_c_([a-zA-Z_]*)_e_([a-zA-Z_]*)\\.fit\\.RData$
--invisible --phony plot
--invisible --phony compare

--command --once Rscript --input --once CompareStanFits.R
--output --once models/comparison_c_{1}_e_{2}.pdf
--input --match models/d_([a-zA-Z_]*)_c_([a-zA-Z_]*)_e_([a-zA-Z_]*)\\.fit\\.RData$
--invisible --phony plot
--invisible --phony compare

--command --once Rscript --input --once CompareStanFits.R
--output --once models/comparison_d_{0}_e_{2}.pdf
--input --match models/d_([a-zA-Z_]*)_c_([a-zA-Z_]*)_e_([a-zA-Z_]*)\\.fit\\.RData$
--invisible --phony plot
--invisible --phony compare

#--command Rscript --input --once StanResiduals.R

--command pdfjoin %--rotateoversize 'false'
%--outfile --output contours/all_contours.pdf
'$$(' cat --input --match --listing contours/contours.list ')'
#--phony --invisible intermediate_pdf

--command pdfjoin %--rotateoversize 'false'
%--outfile --output contours/all_contours_folded.pdf
'$$(' cat --input --match --listing contours/contours_folded.list ')'
#--phony --invisible intermediate_pdf

--command '$(LYX)' %-e knitr --input --match ^(_master|[^_/][^/]*)\.lyx$
--output --invisible {0}.Rnw

--command Rscript %-e "\"library(knitr); knit('{0}.Rnw', '{0}.tex')\""
--input --invisible --match (.*)\.Rnw
--output --invisible --once {0}.tex

--command --invisible --input --match (.*)_weave\.R$
--output --invisible --once {0}.tex

--command --output --match density.tex
--input --invisible density.modeling.RData

#ater knitting, extract the document code from each .tex file
--command
--input ./extract_document
--input --match ((?:.*/)?)([^_][^/]*)(?<!_strip)(?<!_chapter)\.tex$
--output {0}{1}_strip.tex

#compile master document
--command latexmk %-pdf
%-pdflatex='pdflatex -halt-on-error -interaction=nonstopmode'
--input --match (_master)\.tex$
--input --invisible _preamble.tex
--input --invisible _master_preamble.tex
--output --invisible {0}.pdf
--output --invisible {0}.fls
--output --invisible {0}.aux
--output --invisible {0}.bbl
--phony --invisible latex
--invisible --phony pdf
--invisible --input intermediate_pdf

--command --output --invisible --match (_master|modeling)\\.pdf
--input --invisible model.pdf

#master pdf depends on all child .tex files
--command --input --invisible --match .*_strip\.tex$
--output --invisible _master.pdf

--command --input --invisible --match .*_strip\.tex$
--output --invisible _part1.pdf

--command --once touch
--once --output --tagged --match --phony chapters

#make "chapter" files
--command ./chapter --input --invisible chapter
--input --invisible --match (.*)_strip\\.tex
--output {0}_chapter.tex
{0}_strip

--command --once --output --tagged --match --phony --invisible includes

--command osascript poster_frame.applescript
--input --match (.*)\\.mov
--output {0}.png

--command --input --match --invisible (.*)\\.mov
--input --invisible {0}.png
--output --tagged --invisible includes

--command --output --invisible --match (.*_chapter|_master).pdf
--input --invisible includes

#compile individual chapter pdfs
--command latexmk
%-pdf %"-pdflatex=\"pdflatex -halt-on-error -interaction=nonstopmode\""
--input --match (.*)_chapter.tex
--input --invisible _master.tex
--input --invisible _preamble.tex
--input --invisible _master_preamble.tex
--output --invisible {0}_chapter.pdf
--output --invisible {0}_chapter.fls
--phony --invisible latex
--invisible --phony pdf

--command --match --invisible --input (.*)_strip\\.tex
--invisible --phony --output --tagged chapters
--invisible --input {0}_chapter.tex
--invisible --input {0}_chapter.pdf

#compile part 1
--command latexmk
%-pdf %"-pdflatex=\"pdflatex -halt-on-error -interaction=nonstopmode\""
--input --match _part1\\.tex$
--input --invisible _master.tex
--input --invisible _preamble.tex
--input --invisible _master_preamble.tex
--output --invisible _part1.pdf
--output --invisible _part1.fls
--phony --invisible latex
--invisible --phony pdf
--invisible --phony master

--command --output --match --invisible (.*)_chapter\\.pdf
--input --invisible {0}_strip.tex

--command grep '^INPUT' --match --input (.*)\.fls
| cut %-d "' '" %-f 2- > --output {0}.in

--command grep '^OUTPUT' --match --input (.*)\.fls
| cut %-d "' '" %-f 2- > --output {0}.prod

--command Rscript --input --match '(.*)_weave.R$'
--output {0}_plots.pdf
--phony --invisible pdf

#compile graffle figures...
--command osascript --input og-export.applescript
$(abspath --input --match --invisible (.*).graffle((?=/data\.plist|$)) {0}.graffle )
$(abspath --output {0}.pdf ) pdf
--phony --invisible graffles
--phony --invisible intermediate_pdf

#model.graffle includes some "inset" files as insets
--command --output --invisible --once model.pdf
--input --invisible --match inset_.*\.pdf

#everything plots depends on this generated file
--command --output --invisible --match everything\.tex
--input --invisible sensitivity-plot.RData

#which is updated when this is updated...
--command --output --invisible --match sensitivity-plot\.RData
--output --invisible results.tex

--command --once Rscript
--input --once compareLogProbs.R
--output --once models/compare_lp.pdf
--input --match models/.*\\.fit\\.RData
--invisible --phony --once plot
--invisible --phony --once compare

--command --once Rscript --input --once CompareStanFits.R
--output --once SlopeModel_segment_comparison.pdf
--input --match --once SlopeModel_segment.*\\.fit\\.RData$
--invisible --phony --once plot
--invisible --phony --once compare

--command --output --match --once --invisible .*_recording.fit.RData$
600 500 TRUE
--invisible --phony predictions

--command Rscript --input check_predictions.R
--output --mkdir checks/{0}.pdf
--input --match (.*).fit.RData$
--invisible --phony plot
--invisible --phony check
TRUE

--command --once Rscript --input --once collect_times.R
--output --once models/timings.RData
--input --match .*\\.fit.RData
--invisible --phony --once fit

--command --once Rscript --input --once modeling_resids.R
--output --once models/residuals.pdf
--input --match .*\\.fit.RData
--invisible --phony --once plot
--invisible --phony --once compare

# compile web page versions
--command htlatex
--input --match _master.tex
"\"trouble,2\"" "\"\"" "\"\"" "\"-halt-on-error -interaction=nonstopmode\""
 _master.html --output --invisible _master.html
--invisible --phony html

--command
--output --invisible _master.html
--input --invisible --match .*_strip.tex

# compile web page version
--command htlatex
--input --match (.*_chapter).tex
"\"trouble,2\"" "\"\"" "\"\"" "\"-halt-on-error -interaction=nonstopmode\""
--output {0}.html
--invisible --phony html

#compile web page version after extracting content?

_master.html: